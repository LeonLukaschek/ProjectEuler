/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
(https://projecteuler.net/problem=2)
*/

#include <iostream>

int main(int argc, char **argv){
    //term_1 and term_2 for the values, sum used for storing the value from both terms, evensum for storing the sum of even fibonacci numbers
    int term_1 = 1, term_2 = 0, sum = 0, evensum = 0;

    //looping until term_1 or term_2 exceed 4 Million
    while(term_1 < 4000000 || term_2 < 4000000){
        //adding the terms and storing it in a holder variable
        sum = term_1 + term_2;
        //adding sum to evensum if it is even
        if(sum % 2 == 0){
            evensum += sum;
        }
        //term_2 will be the value of term_1 and term_1 the sum so that we can calculate the next fibonacci number in the next loop iteration
        term_2 = term_1;
        term_1 = sum;

        std::cout << sum << ", ";
    }

    std::cout << std::endl;
    std::cout << "Even sum: " << evensum << std::endl;

    return 0;
}
